pub const FRAME_WIDTH: usize = 256;
pub const FRAME_HEIGHT: usize = 240;

const PIXEL_SIZE: usize = 4;

pub struct Screen {
    frame_buffer: Vec<u8>,
    draw_requested: bool
}

impl Screen {
    pub fn new() -> Self {
        Self {
            frame_buffer: vec![0; FRAME_WIDTH * FRAME_HEIGHT * PIXEL_SIZE],
            draw_requested: false
        }
    }

    pub fn get_frame_buffer(&self) -> &[u8] {
        &self.frame_buffer
    }

    pub fn set_pixel(&mut self, row: usize, column: usize, color: usize) {
        const PIXELS: [[u8; PIXEL_SIZE]; 0x40] = [[0x54, 0x54, 0x54, 0xff], [0x00, 0x1e, 0x74, 0xff], [0x08, 0x10, 0x90, 0xff], [0x30, 0x00, 0x88, 0xff], 
                                                  [0x44, 0x00, 0x64, 0xff], [0x5c, 0x00, 0x30, 0xff], [0x54, 0x04, 0x00, 0xff], [0x3c, 0x18, 0x00, 0xff],
                                                  [0x20, 0x2a, 0x00, 0xff], [0x08, 0x3a, 0x00, 0xff], [0x00, 0x40, 0x00, 0xff], [0x00, 0x3c, 0x00, 0xff], 
                                                  [0x00, 0x32, 0x3c, 0xff], [0x00, 0x00, 0x00, 0xff], [0x00, 0x00, 0x00, 0xff], [0x00, 0x00, 0x00, 0xff],
                                                  [0x98, 0x96, 0x98, 0xff], [0x08, 0x4c, 0xc4, 0xff], [0x30, 0x32, 0xec, 0xff], [0x5c, 0x1e, 0xe4, 0xff], 
                                                  [0x88, 0x14, 0xb0, 0xff], [0xa0, 0x14, 0x64, 0xff], [0x98, 0x22, 0x20, 0xff], [0x78, 0x3c, 0x00, 0xff],
                                                  [0x54, 0x5a, 0x00, 0xff], [0x28, 0x72, 0x00, 0xff], [0x08, 0x7c, 0x00, 0xff], [0x00, 0x76, 0x28, 0xff], 
                                                  [0x00, 0x66, 0x78, 0xff], [0x00, 0x00, 0x00, 0xff], [0x00, 0x00, 0x00, 0xff], [0x00, 0x00, 0x00, 0xff],
                                                  [0xec, 0xee, 0xec, 0xff], [0x4c, 0x9a, 0xec, 0xff], [0x78, 0x7c, 0xec, 0xff], [0xb0, 0x62, 0xec, 0xff], 
                                                  [0xe4, 0x54, 0xec, 0xff], [0xec, 0x58, 0xb4, 0xff], [0xec, 0x6a, 0x64, 0xff], [0xd4, 0x88, 0x20, 0xff],
                                                  [0xa0, 0xaa, 0x00, 0xff], [0x74, 0xc4, 0x00, 0xff], [0x4c, 0xd0, 0x20, 0xff], [0x38, 0xcc, 0x6c, 0xff], 
                                                  [0x38, 0xb4, 0xcc, 0xff], [0x3c, 0x3c, 0x3c, 0xff], [0x00, 0x00, 0x00, 0xff], [0x00, 0x00, 0x00, 0xff],
                                                  [0xec, 0xee, 0xec, 0xff], [0xa8, 0xcc, 0xec, 0xff], [0xbc, 0xbc, 0xec, 0xff], [0xd4, 0xb2, 0xec, 0xff], 
                                                  [0xec, 0xae, 0xec, 0xff], [0xec, 0xae, 0xd4, 0xff], [0xec, 0xb4, 0xb0, 0xff], [0xe4, 0xc4, 0x90, 0xff],
                                                  [0xcc, 0xd2, 0x78, 0xff], [0xb4, 0xde, 0x78, 0xff], [0xa8, 0xe2, 0x90, 0xff], [0x98, 0xe2, 0xb4, 0xff], 
                                                  [0xa0, 0xd6, 0xe4, 0xff], [0xa0, 0xa2, 0xa0, 0xff], [0x00, 0x00, 0x00, 0xff], [0x00, 0x00, 0x00, 0xff]];
        
        let offset = (row * FRAME_WIDTH + column) * PIXEL_SIZE;
        self.frame_buffer[offset..offset + PIXEL_SIZE].copy_from_slice(&PIXELS[color]);
    }

    pub fn is_draw_requested(&self) -> bool {
        self.draw_requested
    }

    pub fn request_draw(&mut self) {
        self.draw_requested = true;
    }

    pub fn finish_draw(&mut self) {
        self.draw_requested = false;
    }
}
